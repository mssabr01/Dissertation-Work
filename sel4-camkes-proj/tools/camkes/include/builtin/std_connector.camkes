/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

import "camkes-hardware.idl4";
import "gdb-delegate.camkes";

/**
 * @file
 *
 * This file defines a list of connectors. A connection is an instance of a
 * connector, allowing two components to communicate with each other.
 * Different connectors are used for different purposes.
 *
 * In essence, a connector defines how exactly a component connects to another
 * component. There are two parts, from and to. Most of the connectors are
 * defined such that the "from" component sends data to the "to" component. So
 * the "from" component is more like a sender and the "to" component is like a
 * receiver. Having said that, a totally different semantic can be implemented.
 * It's really up to the programmer to decide it.
 *
 * To use the connector, you define it like this:
 *
 *    connection RPC util_fatfs_FS(from util.fs, to fatfs.fs);
 *
 * where the util_fatfs_FS connection is an instance of the RPC connector. It
 * connects util.fs interface to fatfs.fs interface.
 */

/**
 * Asynchronous event connector
 *
 * Once the connection has been established, the consumer could wait for
 * asynchronous signal sending from the emitter. The waiting process can be
 * blocked or non-blocked. The sending process is non-blocked, that is the
 * emitter can send data at any time and at any rate.
 *
 * One of the advantages of this connector is if the consumer executes much
 * faster than the emitter. The consumer could do other stuff while waiting for
 * the asynchronous signal from the emitter. However it's harder to synchronize
 * the components.
 */
connector seL4Notification {
    from Event with 0 threads;
    to Events;
}
connector seL4NotificationBind {
    from Events with 0 threads;
    to Event;
}
connector seL4NotificationQueue {
    from Event with 0 threads;
    to Events;
}
connector seL4NotificationNative {
    from Events with 0 threads;
    to Event;
}

/**
 * Asynchronous RPC event connector
 *
 * This connector works exactly the same as the asynchronous event connector.
 * The consumer and emitter shouldn't notice any difference. But the internal
 * implementation is different. seL4Notification uses the asynchronous
 * mechanism to send signal, whereas seL4RPCEvent uses the regular RPC
 * to send and imitate the event signal.
 */
connector seL4RPCEvent {
    from Event;
    to Event;
}

/**
 * RPC connector
 *
 * Once the connection has been established, the user could wait for regular
 * RPC signal sending from the provider. The sending and waiting phase are
 * blocked.
 */
connector seL4RPC {
    from Procedure with 0 threads;
    to Procedure;
}

connector seL4RPCCall {
    from Procedures with 0 threads;
    to Procedure;
}

/* Same as seL4RPCCall, except has relaxed type checking */
connector seL4RPCCallNoType {
    from Procedures with 0 threads;
    to Procedure;
    attribute bool disable_interface_type_checking = true;
}

/**
 * Direct Call connector
 *
 * Situates both components in the same protection domain, so that interface
 * calls are backed by function calls, rather than RPCs.
 */
connector seL4DirectCall {
    from Procedure;
    to Procedure;
}

/**
 * Dataport connector
 *
 * This connector allows memory sharing between two components.
 *
 * The dataport size is not defined in this connector, it's up to the
 * implementation.
 */
connector seL4SharedData {
    from Dataports with 0 threads;
    to Dataports with 0 threads;
}

/**
 * Hardware MMIO dataport connector
 *
 * This connector has special behaviour: it designates the component on the
 * hardware_component_data side as fictitious, and represents a hardware
 * device. Code will therefore not be generated for that component.
 *
 * It also implies that the backing memory will be mapped uncached.
 *
 * The hardware_component_data dataport's attribute string should consist of
 * the physical address and size of the memory window, in the following format:
 * "0x<address>:0x<size>"
 */
connector seL4HardwareMMIO {
    from Dataports with 0 threads;
    to hardware Dataport;
}

/**
 * Hardware interrupt event connector
 *
 * This connector has special behaviour: it designates the component on the
 * hardware_component_interrupt side as fictitious, and represents a hardware
 * device. Code will therefore not be generated for that component.
 *
 * The hardware_component_interrupt event's attribute string should consist of
 * the interrupt number, in either decimal or (with the "0x" prefix)
 * hexadecimal.
 */
connector seL4HardwareInterrupt {
    from hardware Event;
    to Event;
}
connector seL4IOAPICHardwareInterrupt {
    from hardware Event;
    to Event;
}

/**
 * Hardware IOPorts connector
 *
 * This connector has special behaviour: it designates the component on the
 * hardware_component_data side as fictitious, and represents a hardware
 * device. Code will therefore not be generated for that component.
 *
 * Note that by nature, this connector is ia32-specific.
 *
 * The attribute 'hardware_component_port_attributes' should be set to define the
 * the IOPort range needed, in the following format: "0x<first_port>:0x<last_port>".
 * The interface provided should be "IOPort". E.g.
 *  component foo {
 *      hardware;
 *      provides IOPort bar;
 *  }
 *  assembly {
 *      composition {
 *          component foo f;
 *          ...
 *          connection HardwareIOPort moo(from ..., to foo.bar);
 *      }
 *      configuration {
 *          foo.bar_attributes = "0x42:0x84";
 *      }
 *  }
 */
connector seL4HardwareIOPort {
    from Procedure with 0 threads;
    to hardware Procedure;
}

/* This connector is only capable of marshalling primitive values (no arrays,
 * strings, user-defined types, ...), but is designed to use variable
 * assignment rather than memcpys so as to be easier to verify.
 */
connector seL4RPCSimple {
    from Procedure with 0 threads;
    to Procedure;
}
