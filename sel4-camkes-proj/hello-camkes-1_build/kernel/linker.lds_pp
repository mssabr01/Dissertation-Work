/*
 * Copyright 2014, General Dynamics C4 Systems
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(GD_GPL)
 */
/*
 * Copyright 2014, General Dynamics C4 Systems
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(GD_GPL)
 */
/* Compile-time configuration parameters. Might be set by the build system. */
/* size of the initial thread's root CNode (2^x slots, x >= 4) */
/* number of timer ticks until a thread is preempted  */
/* the number of scheduler domains */
/* number of priorities per domain */
/* maximum number of caps that can be created in one retype invocation */
/* chunk size for memory clears during retype, in bits. */
/* maximum number of iterations until we preempt a delete/revoke invocation */
/* address range to flush per preemption work unit */
/* maximum number of untyped caps in bootinfo */
/* WARNING: must match value in libsel4! */
/* CONSTRAINT: (16 * CONFIG_MAX_NUM_BOOTINFO_DEVICE_REGIONS) + (5 * CONFIG_MAX_NUM_BOOTINFO_UNTYPED_CAPS) <= 4036 */
/* length of a timer tick in ms  */
/* maximum number of different tracepoints which can be placed in the kernel */
/* maximum number of IOMMU RMRR entries we can record while ACPI parsing */
/* maximum number of IOAPIC supported */
/* Alias CONFIG_MAX_NUM_NODES > 1 to ENABLE_SMP_SUPPORT */
ENTRY(_start)
/* WARNING: constants also defined in plat/machine/hardware.h */
PADDR_BASE = 0x00000000;
PADDR_LOAD = 0x00100000;
KERNEL_BASE = 0xffffffff80000000;
OUTPUT_FORMAT(elf64-x86-64)
KERNEL_OFFSET = KERNEL_BASE - PADDR_BASE;
SECTIONS
{
    /* load kernel to 1M to avoid the famous IA-32 memory holes below */
    . = PADDR_LOAD;
    /* code/data only needed during bootstrapping, linked to physical addresses */
    .phys . :
    {
        *(.mbh)
        *(.phys.text)
        *(.phys.data)
        . = ALIGN(4K);
    }
    .phys.bss ADDR(.phys) + SIZEOF(.phys) (NOLOAD) :
    {
        boot_stack_bottom = .;
        . = . + 2K;
        . = ALIGN(4K);
        boot_stack_top = .;
        *(.phys.bss)
    }
    . = . + KERNEL_OFFSET;
    .boot . : AT(ADDR(.boot) - KERNEL_OFFSET)
    {
        *(.boot.text)
        *(.boot.data)
    }
    .boot.bss . (NOLOAD) : AT(ADDR(.boot.bss) - KERNEL_OFFSET)
    {
        *(.boot.bss)
        . = ALIGN(4K);
    }
    /* Align up so that the SKIM portion of the kernel is by itself
       on large pages */
    . = ALIGN(2M);
    ki_boot_end = .;
    ki_skim_start = .;
    .text . : AT(ADDR(.text) - KERNEL_OFFSET)
    {
        *(.text)
    }
    .rodata . : AT(ADDR(.rodata) - KERNEL_OFFSET)
    {
        *(.rodata)
        *(.rodata.*)
    }
    .skim_data . : AT(ADDR(.skim_data) - KERNEL_OFFSET)
    {
        *(.skim.data)
        *(.skim.data.*)
    }
    .skim_bss . : AT(ADDR(.skim_bss) - KERNEL_OFFSET)
    {
        *(.skim.bss)
        *(.skim.bss.*)
    }
    /* Align up so that the SKIM portion of the kernel is by itself
       on large pages */
    . = ALIGN(2M);
    ki_skim_end = .;
    .data . : AT(ADDR(.data) - KERNEL_OFFSET)
    {
        *(.data)
    }
    .bss . : AT(ADDR(.bss) - KERNEL_OFFSET)
    {
        *(.bss)
        *(COMMON)
    }
    .ehframe : AT(ADDR(.ehframe) - KERNEL_OFFSET)
    {
        _ehframe = .;
        *(.eh_frame)
        . = ALIGN(4K);
    }
    . = ALIGN(4K);
    ki_end = .;
    /DISCARD/ :
    {
        *(.note.gnu.build-id)
        *(.comment)
    }
}
